// EXTERNS {{{

func malloc(bytes: u64) : &u8;
func realloc(data: &u8, bytes: u64) : &u8;
func strlen(str: &u8) : u64;
prefix free(data: &u8);
func strcpy(dest: &u8, src: &u8);
func strncpy(dest: &u8, src: &u8, len: u64);
func memcpy(dest: &u8, src: &u8, len: u64);
func strcmp(a: &u8, b: &u8) : u64;
func printf(str: &u8);
/* func printf(str: &u8, val: u64); */
/* func printf(str: &u8) = printf(str, 0); */
func putchar(char: u8);
func exit(code: u64);

// little extern thing to help me debug
// cuz i cant be asked to write it here
// func print_addr(addr: &u8);

// }}}


// SYSTEM {{{

#prec 25;
infix ==(a: u64, b: u64) : bool = @AS("int_cmp_eq a b");

#prec 25;
infix !=(a: u64, b: u64) : bool = @AS("int_cmp_neq a b");

#prec 30;
infix <(a: u64, b: u64) : bool = @AS("int_cmp_ult a b");

#prec 30;
infix >(a: u64, b: u64) : bool = @AS("int_cmp_ugt a b");

#prec 30;
infix <=(a: u64, b: u64) : bool = @AS("int_cmp_ule a b");

#prec 30;
infix >=(a: u64, b: u64) : bool = @AS("int_cmp_uge a b");

#prec 20;
infix &&(a: u64, b: u64) : u64 = @AS("int_and a b");

#prec 20;
infix ||(a: u64, b: u64) : u64 = @AS("int_or a b");

#prec 25;
infix ==(a: u8, b: u8) : bool = @AS("int_cmp_eq a b");


#prec 25;
infix !=(a: u8, b: u8) : bool = @AS("int_cmp_neq a b");

#prec 30;
infix <(a: u8, b: u8) : bool = @AS("int_cmp_ult a b");

#prec 30;
infix >(a: u8, b: u8) : bool = @AS("int_cmp_ugt a b");

#prec 30;
infix <=(a: u8, b: u8) : bool = @AS("int_cmp_ule a b");

#prec 30;
infix >=(a: u8, b: u8) : bool = @AS("int_cmp_uge a b");

#prec 20;
infix &&(a: u8, b: u8) : u8 = @AS("int_and a b");

#prec 20;
infix ||(a: u8, b: u8) : u8 = @AS("int_or a b");

#prec 20;
infix &&(a: bool, b: bool) : bool = @AS("bool_and a b");

#prec 20;
infix ||(a: bool, b: bool) : bool = @AS("bool_or a b");

#prec 10;
macro infix =(a: _, b: _) = @AS("store_in a b");

#prec 10;
macro infix [=](a: _, b: _) = @AS("raw_store_in a b");

prefix !(a: bool) : bool = @AS("bool_not a");

#prec 75;
infix +(a: u64, b: u64) : u64 = @AS("int_add a b");

#prec 75;
infix -(a: u64, b: u64) : u64 = @AS("int_sub a b");

#prec 100;
infix *(a: u64, b: u64) : u64 = @AS("int_mul a b");

macro suffix ++(a: _) : _ = {
    a = a + 1;
    a
};

macro suffix --(a: _) : _ = {
    a = a - 1;
    a
};

#prec 10;
macro infix +=(a: _, b: _) : _ = {
    a = a + b;
    a
};

/* prec 10; */
/* macro infix -=(a: _, b: _) : _ = { */
/*     a = a - b; */
/*     a */
/* }; */

#prec 25;
infix ==(a: &u8, b: &u8) : bool = {
    a_: u64 = @AS("ptr_to_int a");
    b_: u64 = @AS("ptr_to_int b");
    @AS("int_cmp_eq a_ b_")
};

func assert(val: bool, message: &u8) = if !val {
        printf("Assertion failed: ");
        printf(message);
        printf("\n");
        exit(1)
    };

func assertVerbose(val: bool, message: &u8) = if val {
        printf("Assertion succeeded: ");
        printf(message);
        printf("\n");
    } else {
        printf("Assertion failed: ");
        printf(message);
        printf("\n");
        exit(1);
    };

func panic(message: &u8) = {
    printf("Panic!\n");
    printf(message);
    exit(1);
};

func panic() = {
    printf("Panic!\n");
    exit(1);
};

// }}}

func new(bytes: u64) : &u8 = {
    data: &u8 = malloc(bytes);
    if data == (0 as &u8) {
        panic("Could not malloc");
    };
    data
};

func resize(data: &u8, bytes: u64) : &u8 = {
    new_data: &u8 = realloc(data, bytes);
    if new_data == (0 as &u8) {
        panic("Could not realloc");
    };
    data
};

// LIST {{{

<T> type VariableArray = {
    len: u64,
    set_size: u64,
    data: &T
};


<T> func variablearray#new() : <T> VariableArray = {
    va: <T> VariableArray;
    
    (&va).data = new(@sizeof(T) * 64) as &T;
    (&va).len = 0;
    (&va).set_size = @sizeof(T) * 64;

    va
};

<T> func get(va: & <T> VariableArray, index: u64) : &T = {
    data: &T = va.data;
    if @AS("ptr_to_int data") == 0 { panic("Null data!"); };
    @AS("single_gep data index") as &T
};

<T> func set(va: & <T> VariableArray, index: u64, val: T) = {
    printint(val as u64);
    printint((*(&val)) as u64);
    data: &u64 = va.get<T>(index);
    printint(@AS("ptr_to_int data"));
    memcpy(((va.get<T>(index)) as &u8), (&val) as &u8, @sizeof(T));
    printint((*(va.get<T>(0))) as u64);
};

<T> func append(va: & <T> VariableArray, val: T) = {
    va.len += 1;
    if (va.len * @sizeof(T)) > va.set_size {
        va.set_size += (@sizeof(T) * 64);
        va.data = (realloc((va.data) as &u8, va.set_size) as &T);
    };
    /* (*(va.get<T>(va.len - 1))) = val; */
    va.set<T>(va.len - 1, val);
};

<T> prefix drop(va: <T> VariableArray) = {

    free((&va).data);
};

func try_get(va: & <u64> VariableArray) : &u64 = {
    /* if @AS("ptr_to_int data") == 0 panic("Proper null data"); */
    (va.get<u64>(0))
};

func printint(val: u64);

func test() : &u64 = {
    va: <u64> VariableArray;
    va = variablearray#new<u64>();
    (&va).append<u64>(66);
    printf("made array\n");
    (&va).get<u64>(0);
    printf("got array\n");

    if (&va).len != 1 {
        panic("AAAA");
      };

    (&va).get<u64>(0)
};


func test2() : <u64> VariableArray = {
    va: <u64>VariableArray;
    va = variablearray#new<u64>();
    printf("here");
    (&va).append<u64>(88);

    printint((&va).len);

    printint(*((&va).get<u64>(0)));

    va
};
// }}}
