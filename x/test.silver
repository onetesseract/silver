#prec 15;
infix ==(a: u64, b: u64) : bool = @AS("int_cmp_eq a b");

#prec 10;
macro infix =(x: _, y: _) = {
   @AS("store_in x y");
};

#prec 10;
macro infix [=](x: _, y: _) = {
   @AS("raw_store_in x y");
};

func printf(str: &u8);

type wrapper = {cont: &u8};

func aaaa(wra: &wrapper) = {
   printf(wra.cont);
};

func putchar(char: u64);

type a = {str: &u8};
type b = {x: &a};


type LexString = {
   parent: &u8,
   offset: u64,
   len: u64
};

#prec 75;
infix +(a: u64, b: u64) : u64 = @AS("int_add a b");

#prec 75;
infix -(a: u64, b: u64) : u64 = @AS("int_sub a b");

macro suffix ++(a: u64) : u64 = {
   a = a + 1;
   a
};

macro suffix --(a: u64) : u64 = {
   a = a - 1;
   a
};


func main() : u64 = {
   a: u64 = 70;
   putchar(a);
   a++;
   putchar(a);

   0
};
