#prec 10;
infix =(a: &&u8, b: &u8) = @AS("store_in a b");
#prec 10;
infix =(a: &u8, b: u8) = @AS("store_in a b");
#prec 15;
infix ==(a: u64, b: u64) : bool = @AS("int_cmp_eq a b");

func printf(str: &u8);
func putchar(char: u8);

func exit(code: u64);

brackets [[ ]](string: &u8, other: &u8) = {
  printf(string);
  printf(other);
};

brackets [ ](string: &u8, index: u64): &u8 = {
  @AS("single_gep string index")
};

prefix throw(err: &u8) = {
  printf("Problem: ");
  printf(err);
  exit(1);
};

suffix test_suffix(something: &u8) = {
  printf("Suffix called: ");
  printf(something);
};

func main() : u64 = {
  str: &u8 = "eefee";

  // printf's "eeefeaaa"
  str[["aaa"]];

  // sadly I cannot write into str[2]
  // this is probably by design
  // prints "f"
  putchar(*str[2]);

  // prints "Suffix called: aa"
  "aa" test_suffix;

  // prints "Problem: the child" then exits
  throw "the child";

  0
};

